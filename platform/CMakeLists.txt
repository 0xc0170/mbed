# SPDX-License-Identifier: Apache-2.0

add_library(platform STATIC)

target_link_libraries(platform PUBLIC cmsis target rtos drivers gen_config)

# internal helper functions
function(_mbed_set_handler)
    if(${MBED_OS_TOOLCHAIN} STREQUAL "GCC ARM")
        target_sources(platform PRIVATE source/TARGET_CORTEX_M/TOOLCHAIN_GCC/except.S)
    elseif(${MBED_OS_TOOLCHAIN} STREQUAL ARM)
        target_sources(platform PRIVATE source/TARGET_CORTEX_M/TOOLCHAIN_ARM/except.S)
    elseif(${MBED_OS_TOOLCHAIN} STREQUAL IAR)
        target_sources(platform PRIVATE source/TARGET_CORTEX_M/TOOLCHAIN_IAR/except.S)
        target_sources(platform PRIVATE source/TARGET_CORTEX_M/TOOLCHAIN_IAR/cmain.S)
    endif()
endfunction()

target_sources(platform PRIVATE ATCmdParser.h)
target_sources(platform PRIVATE Callback.h)
target_sources(platform PRIVATE CallChain.h)
target_sources(platform PRIVATE CircularBuffer.h)
target_sources(platform PRIVATE CMakeLists.txt)
target_sources(platform PRIVATE critical.h)
target_sources(platform PRIVATE CriticalSectionLock.h)
target_sources(platform PRIVATE CThunk.h)
target_sources(platform PRIVATE DeepSleepLock.h)
target_sources(platform PRIVATE DirHandle.h)
target_sources(platform PRIVATE FileBase.h)
target_sources(platform PRIVATE FileHandle.h)
target_sources(platform PRIVATE FileLike.h)
target_sources(platform PRIVATE FilePath.h)
target_sources(platform PRIVATE FileSystemHandle.h)
target_sources(platform PRIVATE FileSystemLike.h)
target_sources(platform PRIVATE LocalFileSystem.h)
target_sources(platform PRIVATE mbed_application.h)
target_sources(platform PRIVATE mbed_assert.h)
target_sources(platform PRIVATE mbed_atomic.h)
target_sources(platform PRIVATE mbed_critical.h)
target_sources(platform PRIVATE mbed_debug.h)
target_sources(platform PRIVATE mbed_error.h)
target_sources(platform PRIVATE mbed_interface.h)
target_sources(platform PRIVATE mbed_mem_trace.h)
target_sources(platform PRIVATE mbed_mktime.h)
target_sources(platform PRIVATE mbed_mpu_mgmt.h)
target_sources(platform PRIVATE mbed_poll.h)
target_sources(platform PRIVATE mbed_power_mgmt.h)
target_sources(platform PRIVATE mbed_preprocessor.h)
target_sources(platform PRIVATE mbed_retarget.h)
target_sources(platform PRIVATE mbed_rtc_time.h)
target_sources(platform PRIVATE mbed_semihost_api.h)
target_sources(platform PRIVATE mbed_sleep.h)
target_sources(platform PRIVATE mbed_stats.h)
target_sources(platform PRIVATE mbed_thread.h)
target_sources(platform PRIVATE mbed_toolchain.h)
target_sources(platform PRIVATE mbed_version.h)
target_sources(platform PRIVATE mbed_wait_api.h)
target_sources(platform PRIVATE NonCopyable.h)
target_sources(platform PRIVATE platform.h)
target_sources(platform PRIVATE PlatformMutex.h)
target_sources(platform PRIVATE rtc_time.h)
target_sources(platform PRIVATE ScopedLock.h)
target_sources(platform PRIVATE ScopedRamExecutionLock.h)
target_sources(platform PRIVATE ScopedRomWriteLock.h)
target_sources(platform PRIVATE semihost_api.h)
target_sources(platform PRIVATE SharedPtr.h)
target_sources(platform PRIVATE SingletonPtr.h)
target_sources(platform PRIVATE sleep.h)
target_sources(platform PRIVATE Span.h)
target_sources(platform PRIVATE Stream.h)
target_sources(platform PRIVATE toolchain.h)
target_sources(platform PRIVATE Transaction.h)
target_sources(platform PRIVATE wait_api.h)

target_sources(platform PRIVATE source/ATCmdParser.cpp)
target_sources(platform PRIVATE source/CallChain.cpp)
target_sources(platform PRIVATE source/CriticalSectionLock.cpp)
target_sources(platform PRIVATE source/CThunkBase.cpp)
target_sources(platform PRIVATE source/DeepSleepLock.cpp)
target_sources(platform PRIVATE source/FileBase.cpp)
target_sources(platform PRIVATE source/FileHandle.cpp)
target_sources(platform PRIVATE source/FilePath.cpp)
target_sources(platform PRIVATE source/FileSystemHandle.cpp)
target_sources(platform PRIVATE source/LocalFileSystem.cpp)
target_sources(platform PRIVATE source/mbed_alloc_wrappers.cpp)
target_sources(platform PRIVATE source/mbed_application.c)
target_sources(platform PRIVATE source/mbed_assert.c)
target_sources(platform PRIVATE source/mbed_atomic_impl.c)
target_sources(platform PRIVATE source/mbed_board.c)
target_sources(platform PRIVATE source/mbed_crash_data_offsets.h)
target_sources(platform PRIVATE source/mbed_critical.c)
target_sources(platform PRIVATE source/mbed_error.c)
target_sources(platform PRIVATE source/mbed_error_hist.c)
target_sources(platform PRIVATE source/mbed_error_hist.h)
target_sources(platform PRIVATE source/mbed_interface.c)
target_sources(platform PRIVATE source/mbed_mem_trace.cpp)
target_sources(platform PRIVATE source/mbed_mktime.c)
target_sources(platform PRIVATE source/mbed_mpu_mgmt.c)
target_sources(platform PRIVATE source/mbed_os_timer.cpp)
target_sources(platform PRIVATE source/mbed_os_timer.h)
target_sources(platform PRIVATE source/mbed_poll.cpp)
target_sources(platform PRIVATE source/mbed_power_mgmt.c)
target_sources(platform PRIVATE source/mbed_retarget.cpp)
target_sources(platform PRIVATE source/mbed_rtc_time.cpp)
target_sources(platform PRIVATE source/mbed_sdk_boot.c)
target_sources(platform PRIVATE source/mbed_semihost_api.c)
target_sources(platform PRIVATE source/mbed_stats.c)
target_sources(platform PRIVATE source/mbed_thread.cpp)
target_sources(platform PRIVATE source/mbed_wait_api_no_rtos.c)
target_sources(platform PRIVATE source/mbed_wait_api_rtos.cpp)
target_sources(platform PRIVATE source/Stream.cpp)
target_sources(platform PRIVATE source/SysTimer.cpp)
target_sources(platform PRIVATE source/SysTimer.h)

_mbed_set_handler()

# Currently only Cortex-M anyway, so this is hardcoded here
target_sources(platform PRIVATE source/TARGET_CORTEX_M/mbed_fault_handler.c)
target_sources(platform PRIVATE source/TARGET_CORTEX_M/mbed_fault_handler.h)

target_sources(platform PRIVATE source/minimal-printf/mbed_printf_armlink_overrides.c)
target_sources(platform PRIVATE source/minimal-printf/mbed_printf_implementation.c)
target_sources(platform PRIVATE source/minimal-printf/mbed_printf_implementation.h)
target_sources(platform PRIVATE source/minimal-printf/mbed_printf_wrapper.c)

target_sources(platform PRIVATE cxxsupport)

target_include_directories(platform PUBLIC .)
target_include_directories(platform PUBLIC cxxsupport)
target_include_directories(platform PUBLIC source)
# TODO: enable drivers/ include in files within this module
target_include_directories(drivers PUBLIC ..)
